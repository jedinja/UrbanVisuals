package UrbanVisuals.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Component__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x84d162bfa6bd428dL, 0x9b7556edca8f6b21L, 0x6be5cd2096ec39ffL, "UrbanVisuals.structure.Component");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<String> niceName_id5bs3DiTRRpB = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("niceName").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5bs3DiTRRpB").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<String> getStringsKey_id5bs3DiTSX7g = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getStringsKey").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5bs3DiTSX7g").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(niceName_id5bs3DiTRRpB, getStringsKey_id5bs3DiTSX7g);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String niceName_id5bs3DiTRRpB(@NotNull SAbstractConcept __thisConcept__, String input) {
    StringBuilder sb = new StringBuilder();
    boolean cap = false;
    for (char c : input.toLowerCase().toCharArray()) {
      if (c == ' ') {
        cap = true;
      } else {
        String next = "" + c;
        sb.append((cap ? next.toUpperCase() : next));
        cap = false;
      }
    }
    return sb.toString();
  }
  /*package*/ static String getStringsKey_id5bs3DiTSX7g(@NotNull SAbstractConcept __thisConcept__, String input, String screen) {
    String nice = Component__BehaviorDescriptor.niceName_id5bs3DiTRRpB.invoke(__thisConcept__, input);
    return (nice.length() == 0 ? "" : "Strings." + Component__BehaviorDescriptor.niceName_id5bs3DiTRRpB.invoke(__thisConcept__, screen) + "." + nice);
  }

  /*package*/ Component__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) niceName_id5bs3DiTRRpB(concept, (String) parameters[0]));
      case 1:
        return (T) ((String) getStringsKey_id5bs3DiTSX7g(concept, (String) parameters[0], (String) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
